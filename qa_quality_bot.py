import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8164364559:AAHWKH5TyJMDLR2wVSY_5ZgvIP9tNeHnEw0"
YOUR_CHAT_ID = 473798501
GROUP_CHAT_ID = -1003133537449  # –í –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ ID!

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class ReportStates(StatesGroup):
    date_range = State()
    total = State()
    high = State()
    medium = State()
    low = State()
    reopened = State()
    prod = State()
    risk_zones = State()
    root_causes = State()
    qa_suggestions = State()
    positive_points = State()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø QA Quality Bot.\n–ù–∞–ø–∏—à–∏ /report —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π QA-–æ—Ç—á—ë—Ç.")

@dp.message(Command("report"))
async def report_start(message: types.Message, state: FSMContext):
    if message.chat.id != YOUR_CHAT_ID:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return

    await message.answer("üìÖ –£–∫–∞–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –æ—Ç—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14‚Äì18 –æ–∫—Ç—è–±—Ä—è):")
    await state.set_state(ReportStates.date_range)

@dp.message(ReportStates.date_range)
async def get_date_range(message: types.Message, state: FSMContext):
    await state.update_data(date_range=message.text)
    await message.answer("ü™≤ –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±–∞–≥–æ–≤?")
    await state.set_state(ReportStates.total)

@dp.message(ReportStates.total)
async def get_total(message: types.Message, state: FSMContext):
    await state.update_data(total=message.text)
    await message.answer("üö® –°–∫–æ–ª—å–∫–æ High?")
    await state.set_state(ReportStates.high)

@dp.message(ReportStates.high)
async def get_high(message: types.Message, state: FSMContext):
    await state.update_data(high=message.text)
    await message.answer("üß© –°–∫–æ–ª—å–∫–æ Medium?")
    await state.set_state(ReportStates.medium)

@dp.message(ReportStates.medium)
async def get_medium(message: types.Message, state: FSMContext):
    await state.update_data(medium=message.text)
    await message.answer("ü™∂ –°–∫–æ–ª—å–∫–æ Low?")
    await state.set_state(ReportStates.low)

@dp.message(ReportStates.low)
async def get_low(message: types.Message, state: FSMContext):
    await state.update_data(low=message.text)
    await message.answer("üîÅ –°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö?")
    await state.set_state(ReportStates.reopened)

@dp.message(ReportStates.reopened)
async def get_reopened(message: types.Message, state: FSMContext):
    await state.update_data(reopened=message.text)
    await message.answer("üß® –°–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–µ?")
    await state.set_state(ReportStates.prod)

@dp.message(ReportStates.prod)
async def get_prod(message: types.Message, state: FSMContext):
    await state.update_data(prod=message.text)
    await message.answer("‚ö†Ô∏è –û–ø–∏—à–∏ –∑–æ–Ω—ã —Ä–∏—Å–∫–∞:")
    await state.set_state(ReportStates.risk_zones)

@dp.message(ReportStates.risk_zones)
async def get_risk_zones(message: types.Message, state: FSMContext):
    await state.update_data(risk_zones=message.text)
    await message.answer("üß† –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã?")
    await state.set_state(ReportStates.root_causes)

@dp.message(ReportStates.root_causes)
async def get_root_causes(message: types.Message, state: FSMContext):
    await state.update_data(root_causes=message.text)
    await message.answer("üß∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è QA:")
    await state.set_state(ReportStates.qa_suggestions)

@dp.message(ReportStates.qa_suggestions)
async def get_suggestions(message: types.Message, state: FSMContext):
    await state.update_data(qa_suggestions=message.text)
    await message.answer("‚úÖ –ü–æ–∑–∏—Ç–∏–≤ –Ω–µ–¥–µ–ª–∏:")
    await state.set_state(ReportStates.positive_points)

@dp.message(ReportStates.positive_points)
async def get_positive(message: types.Message, state: FSMContext):
    data = await state.get_data()

    report = f"""
üìÖ QA Quality Report ‚Äî {data['date_range']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
ü™≤ –í—Å–µ–≥–æ –±–∞–≥–æ–≤: {data['total']}
üö® High: {data['high']} | üß© Medium: {data['medium']} | ü™∂ Low: {data['low']}
üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ: {data['reopened']} | üß® –ü—Ä–æ–¥: {data['prod']}

‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∏—Å–∫–∞
{data['risk_zones']}

üß† –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
{data['root_causes']}

üß∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è QA
{data['qa_suggestions']}

‚úÖ –ü–æ–∑–∏—Ç–∏–≤ –Ω–µ–¥–µ–ª–∏
{message.text}
"""

    await bot.send_message(GROUP_CHAT_ID, report)
    await message.answer("üöÄ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —á–∞—Ç –æ—Ç–¥–µ–ª–∞!")
    await state.clear()

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())