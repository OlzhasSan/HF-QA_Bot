import os
import asyncio
import logging
import threading
import time
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from flask import Flask

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
LOG_FILE = "bot.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler(),
    ]
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
YOUR_CHAT_ID = 473798501
GROUP_CHAT_ID = -1003133537449
RENDER_URL = os.getenv("RENDER_URL")

if not BOT_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    raise SystemExit(1)

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class ReportStates(StatesGroup):
    date_range = State()
    total = State()
    high = State()
    medium = State()
    low = State()
    reopened = State()
    prod = State()
    risk_zones = State()
    root_causes = State()
    qa_suggestions = State()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def start(message: types.Message):
    logger.info(f"/start –æ—Ç {message.from_user.full_name} (ID {message.from_user.id})")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø QA Bot.\n–ù–∞–ø–∏—à–∏ /report —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π QA-–æ—Ç—á—ë—Ç.")

@dp.message(Command("report"))
async def report_start(message: types.Message, state: FSMContext):
    logger.info(f"/report –æ—Ç {message.from_user.full_name} (ID {message.from_user.id})")
    if message.chat.id != YOUR_CHAT_ID:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /report –æ—Ç —á—É–∂–æ–≥–æ ID: {message.chat.id}")
        return

    await message.answer("üìÖ –£–∫–∞–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –æ—Ç—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14‚Äì18 –æ–∫—Ç—è–±—Ä—è):")
    await state.set_state(ReportStates.date_range)

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ FSM ===
@dp.message(ReportStates.date_range)
async def get_date_range(message: types.Message, state: FSMContext):
    await state.update_data(date_range=message.text)
    await message.answer("ü™≤ –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±–∞–≥–æ–≤?")
    await state.set_state(ReportStates.total)

@dp.message(ReportStates.total)
async def get_total(message: types.Message, state: FSMContext):
    await state.update_data(total=message.text)
    await message.answer("üö® –°–∫–æ–ª—å–∫–æ High?")
    await state.set_state(ReportStates.high)

@dp.message(ReportStates.high)
async def get_high(message: types.Message, state: FSMContext):
    await state.update_data(high=message.text)
    await message.answer("üß© –°–∫–æ–ª—å–∫–æ Medium?")
    await state.set_state(ReportStates.medium)

@dp.message(ReportStates.medium)
async def get_medium(message: types.Message, state: FSMContext):
    await state.update_data(medium=message.text)
    await message.answer("ü™∂ –°–∫–æ–ª—å–∫–æ Low?")
    await state.set_state(ReportStates.low)

@dp.message(ReportStates.low)
async def get_low(message: types.Message, state: FSMContext):
    await state.update_data(low=message.text)
    await message.answer("üîÅ –°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö?")
    await state.set_state(ReportStates.reopened)

@dp.message(ReportStates.reopened)
async def get_reopened(message: types.Message, state: FSMContext):
    await state.update_data(reopened=message.text)
    await message.answer("üß® –°–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–µ?")
    await state.set_state(ReportStates.prod)

@dp.message(ReportStates.prod)
async def get_prod(message: types.Message, state: FSMContext):
    await state.update_data(prod=message.text)
    await message.answer("‚ö†Ô∏è –í –∫–∞–∫–∏—Ö –º–æ–¥—É–ª—è—Ö –±–∞–≥–∏?:")
    await state.set_state(ReportStates.risk_zones)

@dp.message(ReportStates.risk_zones)
async def get_risk_zones(message: types.Message, state: FSMContext):
    await state.update_data(risk_zones=message.text)
    await message.answer("üß† –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã?")
    await state.set_state(ReportStates.root_causes)

@dp.message(ReportStates.root_causes)
async def get_root_causes(message: types.Message, state: FSMContext):
    await state.update_data(root_causes=message.text)
    await message.answer("üß∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è QA:")
    await state.set_state(ReportStates.qa_suggestions)

@dp.message(ReportStates.qa_suggestions)
async def get_suggestions(message: types.Message, state: FSMContext):
    data = await state.get_data()

    report = f"""
üìÖ QA Quality Report ‚Äî {data['date_range']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
ü™≤ –í—Å–µ–≥–æ –±–∞–≥–æ–≤: {data['total']}
üö® High: {data['high']}
üß© Medium: {data['medium']}
ü™∂ Low: {data['low']}
üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ: {data['reopened']}
üß® –ü—Ä–æ–¥: {data['prod']}

‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∏—Å–∫–∞
{data['risk_zones']}

üß† –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
{data['root_causes']}

üß∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è QA
{data['qa_suggestions']}

"""

    await bot.send_message(GROUP_CHAT_ID, report)
    await message.answer("üöÄ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await state.clear()
    logger.info(f"‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID} –æ—Ç {message.from_user.full_name}")

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Bot is alive!", 200

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê Flask server running on port {port}")
    app.run(host="0.0.0.0", port=port)

# === Keep-alive –ø–∏–Ω–≥–µ—Ä ===
def keep_alive():
    if not RENDER_URL:
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, keep-alive –æ—Ç–∫–ª—é—á—ë–Ω.")
        return

    def ping():
        while True:
            try:
                requests.get(RENDER_URL, timeout=10)
                logger.info(f"üîÑ Keep-alive ping: {RENDER_URL}")
            except Exception as e:
                logger.warning(f"‚ùó –û—à–∏–±–∫–∞ keep-alive –ø–∏–Ω–≥–∞: {e}")
            time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

    threading.Thread(target=ping, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def run_bot():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # Flask –∏ keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threading.Thread(target=run_flask, daemon=True).start()
    keep_alive()
    # –ë–æ—Ç –≤ asyncio
    asyncio.run(run_bot())